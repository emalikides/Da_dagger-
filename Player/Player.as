package Player{	import Weapon.*;	import flash.display.MovieClip;	import flash.events.KeyboardEvent;	import flash.geom.Point;	import flash.display.DisplayObjectContainer;  	import flash.display.Sprite;	/*		possible sources of error:		-movement might need acceleration to look better.	-problem: hold jump then left, jumps left once then stops.	hold left then jump. jumps left.	-is because jump is triggered on key down.	-but left is triggered UNTIL KEY UP.	 soln: need to make jump triggered until key up.	 	 **Wierd fact:	 -the movie clip height changes with frames??!! -means is sometimes liable to randomly goto and 	 play the first frame because of the bottom collision.		TODO-make endurance + power count.	*/	//(abstract) class that defines the player type, a basis from which all characters are created.	//3 attacks and one power attack.	public class Player extends flash.display.MovieClip {		//constants		public const powermax:int=500;		public const left:int=1;		public const right:int=2;		public const up:int=3;		//acceleration due to gravity		public var gravity:Number=-1;		public var worldwidth:Number;		public var worldheight:Number;		//the players health		public var health:Number;		public var lives:int;		//the stat of the players power		public var power:Number=0;		//the players weapon		public var weapon:Weapon;		//the frame numbers of the attack animations.		public var attacknos:Array;		//the frame number of the jump animation		public var jumpno:int;		//stats, these will affect how the enemy is affected by their attacks		public var speed:Number;		//affects the time taken to power up for power attack.		public var end:Number;		//the velocity vector of this player.		public var vel:Vector.<Number>;		//array of booleans storing whether a particular function has been called.		//order:left, right, up, a0, a1, a2, a3; 		public var fcalled:Array;				//indicates whether the player is on the ground or not.		public var hitbottom:Boolean=false;		public var hittop:Boolean=false;		public var ontplayer:Boolean=false;		public var onbplayer:Boolean=false;		//says whether this player has hit another player horizontally, and stopped because of it.		public var hitrplayer:Boolean=false;		public var hitlplayer:Boolean=false;		//flag to ensure mutual exclusion of the attack movie clips over the time frame 		//of the attack animation sequence.		public var canattack:Boolean=true;		//boolean that says if this player is alive, this variable is a little unnecessary.		public var alive:Boolean=true;		//Defines how high the ground is.		public var ground:Number;		//Defines how much the bounding box for use for collisions.		public var offsetbox:Sprite;		//Defines bounds for collisions.		public var bounds:Point;				//defines the multiple of the speed that gives the jump speed.		public var jumpfactor:Number;				//stuff for collisions: each player has a hand, head and foot, and a significant point		// in all of these that create health loss.		//these will be set implicitly by setting corresponding instance names. -doesn't seem to work, 		//Set using different initial names, then equate in constructor function.				public var hand:MovieClip;		public var head:MovieClip;		public var foot:MovieClip;		//These are actually superfluous, we will use the position of the movieclip instead (see experiment).		public var sigpthand:Point = new Point(0,0);		public var sigpthead:Point = new Point(0,0);		public var sigptfoot:Point = new Point(0,0);		//variable passed to the host class (dadagger.as) for decrementing the enemies health.			public var attackeffect:Number;		//array storing the effects (amount of health taken). of each attack.		public var effects:Array;		//health, lives, attackframes, effects array, number of jump frame, speed, endurance, width, height, position		public function Player(h:Number, l:int, nos:Array, eff:Array, jmpno:int, sp:Number, 		 en:Number, wdth:Number,hght:Number, position:Point) {			x=position.x;			y=position.y;			health=h;			lives=l;			attacknos=nos;			effects = eff;			jumpno=jmpno;			jumpfactor=4;			//speed is in pixels/second. (with framerate of 60);			speed=sp/60;						worldwidth=wdth;			worldheight=hght;			ground=0;			bounds=new Point();						offsetbox=new Sprite();			end=en;			vel=new Vector.<Number>(2);			fcalled = new Array();			for (var i:int=0; i<7; i++) {				fcalled.push(false);			}		}				//function that sets the new box of this player		public function setBox(ob:Point) {			//the only way I could figure out how to set the width of a sprite.			offsetbox.graphics.drawRect(0, 0,ob.x,ob.y);			offsetbox.x=x-offsetbox.width/2;			offsetbox.y=y-offsetbox.height/2;			bounds.x=offsetbox.width;			bounds.y=offsetbox.height;		}				public function resetBox() {			offsetbox.x=x-offsetbox.width/2;			offsetbox.y=y-offsetbox.height/2;		}				public function toEdge(angle:Number):Point {			return new Point(bounds.x*Math.cos(angle),bounds.y*Math.sin(angle));				}				//function that defines the key controls for a player.		public function playerControl(e:KeyboardEvent) {			//left 			if ((e.keyCode==37)&&(!fcalled[0])) {				fcalled[0]=true;				//run(left);			}//right			if ((e.keyCode==39)&&(!fcalled[1])) {				fcalled[1]=true;				//run(right);			}//jump (up)			if ((e.keyCode==38)&&(!fcalled[2])) {				fcalled[2]=true;				//run(up);			}			//throw the weapon if the player has one. (a player can throw a weapon at any time)			if (weapon!=null) {				if (e.keyCode==87) {					weapon.wThrow(scaleX);					weapon=null;				}			}			//attack1. (a)			if ((e.keyCode == 65)&&(power<powermax)) {				trace(power);				power+=end/10;			}//s			if (e.keyCode==83) {				fcalled[5]=true;				//attack(2);			}//d			if (e.keyCode==68) {				fcalled[4]=true;				//attack(1);			}//f			if (e.keyCode==70) {				fcalled[3]=true;				//attack(0);			}		}		//function that plays an attack.		public function attack(no:int) {			if (canattack) {				canattack=false;				attackeffect=effects[no];				gotoAndPlay(attacknos[no]);			}		}		//function for use in the this movieclip's timeline to allow an attack.		public function setAttack() {			canattack=true;		}		//function 		public function onKeyRelease(e:KeyboardEvent) {			switch (e.keyCode) {					//left 				case 37 :										fcalled[0]=false;					vel[0]= hitbottom?0:vel[0];					break;					//right				case 39 :					fcalled[1]=false;					vel[0]= hitbottom?0:vel[0];					break;					//up				case 38 :					fcalled[2]=false;					break;					//run(up);			}			//powermove (a) 			if ((e.keyCode == 65)&&(power == powermax)) {				fcalled[6]=true;			}//s			if (e.keyCode==83) {				fcalled[5]=false;				//attack(2);			}//d			if (e.keyCode==68) {				fcalled[4]=false;				//attack(1);			}//f			if (e.keyCode==70) {				fcalled[3]=false;				//attack(0);			}		}		//function that moves the movie clip in the direction indicated by its argument.		public function run(dir:int) {			switch (dir) {				case left :					if (vel[0]>=0) {						vel[0]-=speed;						flip();					}					break;				case right :					if (vel[0]<=0) {						vel[0]+=speed;						flip();					}					break;				case up :					if ((hitbottom)||(ontplayer)) {						gotoAndPlay(jumpno);						hitbottom=false;						ontplayer=false;						vel[1]-=jumpfactor*speed;						trace(vel[1]);					}					break;			}		}		//function that moves the movie clip each frame, takes into account collisions with		//the stage.		public function updatev(gravity:Number) {						//update the velocity and decide what attacks this player must do:			if (fcalled[0]) {				run(left);			}			if (fcalled[1]) {				run(right);			}			if (fcalled[2]) {				run(up);			}			//if the super attack is called, don't do any other attacks.			if (fcalled[6]) {				if (!fcalled[2]) run(up);				attack(9);				power=0;				fcalled[6]=false;			} else if (fcalled[2]) {				//jump combos				if (fcalled[3]) {					attack(2);				} else if (fcalled[4]) {					attack(5);				} else if (fcalled[5]) {					attack(8);				}			} else if (((fcalled[1])&&(!fcalled[0]))||((fcalled[0])&&(!fcalled[1]))) {				//run combos (if both left and right are pressed, nothing happens)				if (fcalled[3]) {					attack(1);				} else if (fcalled[4]) {					attack(4);				} else if (fcalled[5]) {					attack(7);				}			} else {				//here either none of the directional keys are pressed, or				//both left and right are pressed.				if (fcalled[3]) {					attack(0);				} else if (fcalled[4]) {					attack(3);				} else if (fcalled[5]) {					attack(6);				}			}			if (!hitbottom) {				vel[1]+=gravity;			}//set relevant booleans false before collision checking.			ontplayer=hittop=onbplayer=hitrplayer=hitlplayer=false;		}		//function that flips the movie clip to the direction it's travelling		public function flip() {			if ((scaleX < 0)&&(vel[0]>0)) {				scaleX*=-1;			} else if ((scaleX > 0)&&(vel[0]<0)) {				scaleX*=-1;			}		}		//function that allows the powerup class to give this player a weapon		public function recv(w:Object) {			if (w is Number) {				health+=w;			} else {				//assume w is weapon				weapon=Weapon(w);			}		}		//function that decrements the health of this player, and if need be, kills the player.		public function sicken(amount:Number) {			health-=amount;			trace("Oocha took a hit!");			if (health<0) {				//kill this player, signal game over.				alive=false;			}		}	}}